{
  "facil": [
    { "id": 1, "titulo": "Componente funcional", "enunciado": "Como criar um componente funcional em React que retorna um elemento div?", "perguntas": ["function MeuComponente() { return <div></div> }", "const MeuComponente = () => <div></div>;", "class MeuComponente extends React.Component { render() { return <div></div> }}", "React.createElement('div')"], "respostaCorreta": "const MeuComponente = () => <div></div>;" },
    { "id": 2, "titulo": "JSX", "enunciado": "O que e JSX em React?", "perguntas": ["Sintaxe que mistura JavaScript e HTML", "Library de estilizacao", "Ferramenta de testes", "API de roteamento"], "respostaCorreta": "Sintaxe que mistura JavaScript e HTML" },
    { "id": 3, "titulo": "useState basico", "enunciado": "Como importar e usar o hook useState?", "perguntas": ["import { useState } from 'react'; const [valor, setValor] = useState(0);", "import useState from 'react'; const valor = useState(0);", "const [valor, setValor] = React.useState = useState(0);", "import { useState } from 'react'; const valor = useState();"], "respostaCorreta": "import { useState } from 'react'; const [valor, setValor] = useState(0);" },
    { "id": 4, "titulo": "Props", "enunciado": "Como passar uma prop chamada 'title' com valor 'Hello'?", "perguntas": ["<MeuComponente title='Hello' />", "<MeuComponente propTitle='Hello' />", "<MeuComponente Hello={title} />", "<MeuComponente value='Hello' />"], "respostaCorreta": "<MeuComponente title='Hello' />" },
    { "id": 5, "titulo": "Lendo props", "enunciado": "Como acessar a prop 'title' dentro do componente?", "perguntas": ["function MeuComponente({ title }) { return <h1>{title}</h1> }", "function MeuComponente(props) { return <h1>props.title</h1> }", "function MeuComponente(props) { return <h1>{props.title}</h1> }", "function MeuComponente(title) { return <h1>{title}</h1> }"], "respostaCorreta": "function MeuComponente(props) { return <h1>{props.title}</h1> }" },
    { "id": 6, "titulo": "Evento onClick", "enunciado": "Como adicionar um evento de clique em um botao?", "perguntas": ["<button onClick={handleClick}>Clique</button>", "<button onclick='handleClick()'>Clique</button>", "<button click={handleClick}>Clique</button>", "<button onPress={handleClick}>Clique</button>"], "respostaCorreta": "<button onClick={handleClick}>Clique</button>" },
    { "id": 7, "titulo": "Renderizar lista", "enunciado": "Como renderizar um array 'items' dentro de li?", "perguntas": ["items.map(item => <li key={item.id}>{item.name}</li>)", "for(item of items) <li>{item.name}</li>", "items.forEach(item => <li>{item.name}</li>)", "items.render(item => <li>{item.name}</li>)"], "respostaCorreta": "items.map(item => <li key={item.id}>{item.name}</li>)" },
    { "id": 8, "titulo": "Chave em lista", "enunciado": "Para que serve a prop 'key' em listas?", "perguntas": ["Ajudar o React a identificar itens unicos", "Adicionar classes CSS", "Definir id no HTML", "Fazer dispatch de eventos"], "respostaCorreta": "Ajudar o React a identificar itens unicos" },
    { "id": 9, "titulo": "Fragment", "enunciado": "Como usar Fragment para agrupar elementos sem div extra?", "perguntas": ["<> <p/> <p/> </>", "<Fragment> <p/> </Fragment>", "<React.Fragment> <p/> </React.Fragment>", "Todas as anteriores"], "respostaCorreta": "Todas as anteriores" },
    { "id": 10, "titulo": "Render no DOM", "enunciado": "Qual metodo e usado para renderizar o root no React 17?", "perguntas": ["ReactDOM.render(<App/>, document.getElementById('root'))", "createRoot(<App/>)", "React.render(<App/>, root)", "ReactDOM.start(<App/>, root)"], "respostaCorreta": "ReactDOM.render(<App/>, document.getElementById('root'))" },
    { "id": 11, "titulo": "useEffect basico", "enunciado": "Como executar efeito apenas uma vez apos o mount?", "perguntas": ["useEffect(() => { }, [])", "useEffect(() => { }, [state])", "useEffect(() => { })", "useEffect(() => { }, null)"], "respostaCorreta": "useEffect(() => { }, [])" },
    { "id": 12, "titulo": "Import React", "enunciado": "Como importar React no topo de um componente (obsoleto em React 17+)?", "perguntas": ["import React from 'react';", "require('react')", "import { React } from 'react';", "const React = require('react')"], "respostaCorreta": "import React from 'react';" },
    { "id": 13, "titulo": "Estilo inline", "enunciado": "Como aplicar cor vermelha via estilo inline?", "perguntas": ["<div style={{ color: 'red' }}></div>", "<div style=\"color: red\"></div>", "<div className=\"red\"></div>", "<div css={{ color: 'red' }}></div>"], "respostaCorreta": "<div style={{ color: 'red' }}></div>" },
    { "id": 14, "titulo": "className", "enunciado": "Qual prop define classes CSS em React?", "perguntas": ["className", "class", "cssClass", "classname"], "respostaCorreta": "className" },
    { "id": 15, "titulo": "Render condicional", "enunciado": "Como usar operador ternario no JSX?", "perguntas": ["{condicao ? <A/> : <B/>}", "{condicao && <A/>}", "{if(condicao) return <A/>}", "<Ternario/>"], "respostaCorreta": "{condicao ? <A/> : <B/>}" },
    { "id": 16, "titulo": "Comentario em JSX", "enunciado": "Como escrever comentario dentro do JSX?", "perguntas": ["{/* comentario */}", "<!-- comentario -->", "// comentario", "\\* comentario *\\"], "respostaCorreta": "{/* comentario */}" },
    { "id": 17, "titulo": "Render null", "enunciado": "Como nao renderizar nada em um componente?", "perguntas": ["return null;", "return;", "render: none;", "return undefined;"], "respostaCorreta": "return null;" },
    { "id": 18, "titulo": "defaultProps", "enunciado": "Como definir props padrao em componente funcional?", "perguntas": ["MeuComponente.defaultProps = { title: 'Ola' };", "defaultProps(MeuComponente)", "function MeuComponente(props = {title:'Ola'})", "props.default = 'Ola'"], "respostaCorreta": "MeuComponente.defaultProps = { title: 'Ola' };" },
    { "id": 19, "titulo": "Input controlado", "enunciado": "Qual prop e usada para controlar valor de input?", "perguntas": ["value e onChange", "defaultValue", "inputValue", "inputControl"], "respostaCorreta": "value e onChange" },
    { "id": 20, "titulo": "Atualizar estado", "enunciado": "Como atualizar o estado 'count' usando setCount?", "perguntas": ["setCount(count + 1)", "count = count + 1", "this.setState({ count: count + 1 })", "state.count++"], "respostaCorreta": "setCount(count + 1)" }
  ],
  "medio": [
    { "id": 1, "titulo": "Cleanup no useEffect", "enunciado": "Como definir funcao de limpeza no useEffect?", "perguntas": ["useEffect(() => { return () => { /* cleanup */ } }, []);", "useEffect(() => { /* cleanup */ }, []);", "useEffect(() => cleanup());", "useEffect({}, []);"], "respostaCorreta": "useEffect(() => { return () => { /* cleanup */ } }, []);" },
    { "id": 2, "titulo": "useRef basico", "enunciado": "Para que serve o hook useRef?", "perguntas": ["Acessar elemento DOM ou manter valor mutavel sem rerender", "Declarar variavel de estado", "Criar contexto", "Gerar chave unica"], "respostaCorreta": "Acessar elemento DOM ou manter valor mutavel sem rerender" },
    { "id": 3, "titulo": "useContext", "enunciado": "Como consumir um context 'UserContext' dentro de componente?", "perguntas": ["const user = useContext(UserContext);", "const user = UserContext();", "const user = Context(UserContext);", "const user = UserContext.value;"], "respostaCorreta": "const user = useContext(UserContext);" },
    { "id": 4, "titulo": "Criar Context", "enunciado": "Como criar um context com valor padrao {}?", "perguntas": ["const MyContext = createContext({});", "const MyContext = new Context();", "const MyContext = Context({});", "const MyContext = React.Context();"], "respostaCorreta": "const MyContext = createContext({});" },
    { "id": 5, "titulo": "forwardRef basico", "enunciado": "Como usar forwardRef para encaminhar ref?", "perguntas": ["const Comp = forwardRef((props, ref) => <div ref={ref}/>);", "const Comp = (props, ref) => <div ref={ref}/>;", "forwardRef(ref => Comp)", "Comp.forwardRef((props, ref) => ...)"], "respostaCorreta": "const Comp = forwardRef((props, ref) => <div ref={ref}/>);" },
    { "id": 6, "titulo": "memo basico", "enunciado": "Para que serve React.memo?", "perguntas": ["Evitar rerenders quando props nao mudam", "Otimizar CSS", "Criar componente de memo", "Gerar id unico"], "respostaCorreta": "Evitar rerenders quando props nao mudam" },
    { "id": 7, "titulo": "useCallback", "enunciado": "Qual a funcao do hook useCallback?", "perguntas": ["Memorizar funcao entre renders", "Declarar callback externo", "Criar evento de clique", "Controlar input"], "respostaCorreta": "Memorizar funcao entre renders" },
    { "id": 8, "titulo": "useMemo", "enunciado": "Quando usar useMemo?", "perguntas": ["Para memorizar valor calculado pesado", "Para atualizar JSX", "Para guardar variavel", "Para criar componente"], "respostaCorreta": "Para memorizar valor calculado pesado" },
    { "id": 9, "titulo": "Code splitting com lazy", "enunciado": "Como carregar componente 'Other' de forma lazy?", "perguntas": ["const Other = React.lazy(() => import('./Other'));", "import lazy from 'react';", "const Other = lazy('./Other');", "<Suspense load='./Other'>"], "respostaCorreta": "const Other = React.lazy(() => import('./Other'));" },
    { "id": 10, "titulo": "Suspense basico", "enunciado": "Como exibir fallback durante carregamento lazy?", "perguntas": ["<Suspense fallback={<div>Loading...</div>>", "<Lazy fallback='Loading'>", "<Suspense loadFallback={<div/>>>", "<Div fallback='Loading'/>"], "respostaCorreta": "<Suspense fallback={<div>Loading...</div>>" },
    { "id": 11, "titulo": "Componente controlado vs nao controlado", "enunciado": "Qual diferenca entre input controlado e nao controlado?", "perguntas": ["Controlado tem value e onChange, nao controlado usa ref", "Controlado usa ref, nao controlado usa state", "Sem diferenca", "Controlado e desatualizado"], "respostaCorreta": "Controlado tem value e onChange, nao controlado usa ref" },
    { "id": 12, "titulo": "Prop drilling", "enunciado": "O que e prop drilling?", "perguntas": ["Passar props manualmente por varios niveis", "Cortar props", "Derrubar componente", "Atualizar estado global"], "respostaCorreta": "Passar props manualmente por varios niveis" },
    { "id": 13, "titulo": "HOC basico", "enunciado": "O que um HOC faz?", "perguntas": ["Recebe um componente e retorna outro com props extras", "Cria novo hook", "Define funcao pura", "Converte JSX"], "respostaCorreta": "Recebe um componente e retorna outro com props extras" },
    { "id": 14, "titulo": "React Router Link", "enunciado": "Qual componente cria um link de navegacao com react-router?", "perguntas": ["<Link to='/home'/>", "<Nav to='/home'/>", "<Route path='/home'/>", "<a href='/home'/>"], "respostaCorreta": "<Link to='/home'/>" },
    { "id": 15, "titulo": "Portals basico", "enunciado": "Como criar um portal para elemento '#modal-root'?", "perguntas": ["ReactDOM.createPortal(<Modal/>, document.getElementById('modal-root'))", "createPortal(<Modal>)", "<Portal target='#modal-root'/>", "React.createPortal()"], "respostaCorreta": "ReactDOM.createPortal(<Modal/>, document.getElementById('modal-root'))" },
    { "id": 16, "titulo": "Error Boundary basico", "enunciado": "Qual metodo de ciclo de vida e usado em classes para capturar erros?", "perguntas": ["componentDidCatch(error, info)", "getDerivedStateFromError()", "componentWillCatch()", "catchError()"], "respostaCorreta": "componentDidCatch(error, info)" },
    { "id": 17, "titulo": "StrictMode", "enunciado": "Para que serve <React.StrictMode>?", "perguntas": ["Ativar checagens e avisos adicionalmente", "Desativar modo de producao", "Ativar modo de depuracao no CSS", "Remover warnings"], "respostaCorreta": "Ativar checagens e avisos adicionalmente" },
    { "id": 18, "titulo": "PropTypes", "enunciado": "Qual pacote verifica tipo de props em tempo de execucao?", "perguntas": ["prop-types", "props-check", "react-types", "type-props"], "respostaCorreta": "prop-types" },
    { "id": 19, "titulo": "useReducer basico", "enunciado": "Quando usar useReducer em vez de useState?", "perguntas": ["Para gerenciar estado complexo com logica customizada", "Para atualizar state simples", "Para estilizar componente", "Para roteamento"], "respostaCorreta": "Para gerenciar estado complexo com logica customizada" },
    { "id": 20, "titulo": "Context API basico", "enunciado": "Como prover valor para um context?", "perguntas": ["<MyContext.Provider value={valor}>...", "<Provider value={valor}>...", "Context.Provider({valor})", "useContext.Provider"], "respostaCorreta": "<MyContext.Provider value={valor}>..." }
  ],
  "dificil": [
    { "id": 1, "titulo": "useLayoutEffect", "enunciado": "Qual diferenca principal entre useEffect e useLayoutEffect?", "perguntas": ["useLayoutEffect roda antes da pintura do DOM, useEffect depois", "useEffect roda antes, useLayoutEffect depois", "Ambos iguais", "useLayoutEffect e obsoleto"], "respostaCorreta": "useLayoutEffect roda antes da pintura do DOM, useEffect depois" },
    { "id": 2, "titulo": "useTransition", "enunciado": "O que useTransition permite fazer?", "perguntas": ["Marcar atualizacao como de baixa prioridade", "Criar transicao CSS", "Roteamento de transicoes", "Animacao de componentes"], "respostaCorreta": "Marcar atualizacao como de baixa prioridade" },
    { "id": 3, "titulo": "startTransition", "enunciado": "Como usar startTransition para executar atualizacao?", "perguntas": ["import { startTransition } from 'react'; startTransition(() => setState(x+1));", "startTransition(x => x+1)", "React.startTransition()", "<startTransition>"], "respostaCorreta": "import { startTransition } from 'react'; startTransition(() => setState(x+1));" },
    { "id": 4, "titulo": "SuspenseList", "enunciado": "Para que serve SuspenseList?", "perguntas": ["Controlar ordem de revelacao de varios Suspense", "Listar erros", "Agrupar listas", "Suspender componentes"], "respostaCorreta": "Controlar ordem de revelacao de varios Suspense" },
    { "id": 5, "titulo": "Profiler", "enunciado": "Como usar Profiler para medir desempenho de um componente?", "perguntas": ["<Profiler id='MeuComp' onRender={callback}>", "<Profiler component={MeuComp}/>", "React.Profiler({})", "createProfiler()"], "respostaCorreta": "<Profiler id='MeuComp' onRender={callback}>" },
    { "id": 6, "titulo": "Concurrent Mode", "enunciado": "Como habilitar modo concorrente no React 18?", "perguntas": ["ReactDOM.createRoot(root).render(<App/>)", "ReactDOM.render(<App/>, root, { concurrent: true })", "<ConcurrentMode>", "ConcurrentRoot.render()"], "respostaCorreta": "ReactDOM.createRoot(root).render(<App/>)" },
    { "id": 7, "titulo": "createRoot vs render", "enunciado": "Qual metodo substitui ReactDOM.render no React 18?", "perguntas": ["ReactDOM.createRoot(container).render(<App/>)", "ReactDOM.startRoot()", "ReactDOM.renderRoot()", "ReactDOM.newRoot()"], "respostaCorreta": "ReactDOM.createRoot(container).render(<App/>)" },
    { "id": 8, "titulo": "Automatic Batching", "enunciado": "O que automatic batching faz no React 18?", "perguntas": ["Agrupa varias setState em um unico render", "Executa setState isoladamente", "Bloqueia updates", "Merge de props"], "respostaCorreta": "Agrupa varias setState em um unico render" },
    { "id": 9, "titulo": "hydrateRoot", "enunciado": "Como hidratar app React no cliente apos SSR?", "perguntas": ["ReactDOM.hydrateRoot(container, <App/>)", "ReactDOM.hydrate(<App/>, container)", "ReactDOM.render(<App/>, container)", "ReactDOM.createRoot(container).hydrate()"], "respostaCorreta": "ReactDOM.hydrateRoot(container, <App/>)" },
    { "id": 10, "titulo": "renderToPipeableStream", "enunciado": "Qual metodo do ReactDOMServer e usado para streaming SSR em Node?", "perguntas": ["ReactDOMServer.renderToPipeableStream(<App />)", "renderToString(<App/>)", "ReactDOMServer.renderToStaticMarkup(<App/>)", "stream(<App>)"], "respostaCorreta": "ReactDOMServer.renderToPipeableStream(<App />)" },
    { "id": 11, "titulo": "renderToReadableStream", "enunciado": "Qual API web pode ser usada com React 18 para SSR em edge?", "perguntas": ["ReactDOMServer.renderToReadableStream(<App />)", "renderToString(<App/>)", "renderToPipeableStream(<App/>)", "createEdgeStream(<App>)"], "respostaCorreta": "ReactDOMServer.renderToReadableStream(<App />)" },
    { "id": 12, "titulo": "useImperativeHandle", "enunciado": "Para que serve o hook useImperativeHandle?", "perguntas": ["Personalizar valor exposto via ref em componentes forwardRef", "Declarar ref em componente classe", "Atualizar estado via ref", "Criar ref novo"], "respostaCorreta": "Personalizar valor exposto via ref em componentes forwardRef" },
    { "id": 13, "titulo": "useInsertionEffect", "enunciado": "Quando usar useInsertionEffect?", "perguntas": ["Para inserir estilos antes da mutacao do DOM", "Para atualizar estado pesado", "Para log de debug", "Para efeitos de layout"], "respostaCorreta": "Para inserir estilos antes da mutacao do DOM" },
    { "id": 14, "titulo": "useSyncExternalStore", "enunciado": "Qual hook do React 18 e recomendado para assinar stores externas?", "perguntas": ["useSyncExternalStore", "useExternalStore", "useStore", "useSubscribe"], "respostaCorreta": "useSyncExternalStore" },
    { "id": 15, "titulo": "useId", "enunciado": "Para que serve o hook useId?", "perguntas": ["Gerar IDs unicos estaveis para SSR e cliente", "Gerar chaves de lista", "Criar IDs randomicos", "Controlar estado"], "respostaCorreta": "Gerar IDs unicos estaveis para SSR e cliente" },
    { "id": 16, "titulo": "flushSync", "enunciado": "Quando usar ReactDOM.flushSync?", "perguntas": ["Para forcar atualizacao sincrona fora de evento React", "Para limpar efeitos pendentes", "Para pausar estados", "Para debounce de setState"], "respostaCorreta": "Para forcar atualizacao sincrona fora de evento React" },
    { "id": 17, "titulo": "batchedUpdates", "enunciado": "O que ReactDOM.unstable_batchedUpdates faz?", "perguntas": ["Agrupa multiplas atualizacoes em um unico render", "Executa atualizacoes separadas", "Bloqueia atualizacoes", "Sincroniza hooks"], "respostaCorreta": "Agrupa multiplas atualizacoes em um unico render" },
    { "id": 18, "titulo": "StrictMode double mount", "enunciado": "Qual caracteristica do StrictMode no React 18 que ajuda a detectar efeitos colaterais?", "perguntas": ["Montar componente duas vezes no dev", "Desmontar o DOM", "Bloquear renders", "Ignorar setState"], "respostaCorreta": "Montar componente duas vezes no dev" },
    { "id": 19, "titulo": "renderToString", "enunciado": "Qual metodo do ReactDOMServer retorna string HTML para SSR?", "perguntas": ["ReactDOMServer.renderToString(<App />)", "renderToPipeableStream(<App/>)", "renderToStaticMarkup(<App/>)", "renderToNodeStream(<App/>)"], "respostaCorreta": "ReactDOMServer.renderToString(<App />)" },
    { "id": 20, "titulo": "React DevTools Profiler", "enunciado": "Qual ferramenta permite inspecionar tempo de renderizacao de componentes?", "perguntas": ["React DevTools Profiler", "Chrome Performance Tab", "VSCode Debugger", "React Performance API"], "respostaCorreta": "React DevTools Profiler" }
  ]
}
